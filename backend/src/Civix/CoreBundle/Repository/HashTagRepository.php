<?php

namespace Civix\CoreBundle\Repository;

use Civix\CoreBundle\Entity\Post;
use Civix\CoreBundle\Entity\UserPetition;
use Doctrine\ORM\EntityRepository;
use Civix\CoreBundle\Entity\Poll\Question;
use Civix\CoreBundle\Entity\Poll\Question\Petition as PollPetition;
use Civix\CoreBundle\Entity\HashTag;
use Civix\CoreBundle\Parser\Tags as HashTagParser;

/**
 * HashTagRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HashTagRepository extends EntityRepository
{
    /**
     * @param UserPetition $petition
     * @param bool     $saveTagsInEntity
     */
    public function addForPetition(UserPetition $petition, $saveTagsInEntity = true)
    {
        $em = $this->getEntityManager();
        $tags = HashTagParser::parseHashTags($petition->getBody());
        foreach ($tags['parsed'] as $tag) {
            $entity = $this->findOneBy(['name' => $tag]);
            if (!$entity) {
                $entity = new HashTag($tag);
                $em->persist($entity);
            }
            $petition->addHashTag($entity);
            $em->persist($petition);
        }

        if ($saveTagsInEntity) {
            $petition->setCachedHashTags($tags['original']);
        }
        $em->flush($petition);
    }
    /**
     * @param Post $post
     * @param bool     $saveTagsInEntity
     */
    public function addForPost(Post $post, $saveTagsInEntity = true)
    {
        $em = $this->getEntityManager();
        $tags = HashTagParser::parseHashTags($post->getBody());
        foreach ($tags['parsed'] as $tag) {
            $entity = $this->findOneBy(['name' => $tag]);
            if (!$entity) {
                $entity = new HashTag($tag);
                $em->persist($entity);
            }
            $post->addHashTag($entity);
            $em->persist($post);
        }

        if ($saveTagsInEntity) {
            $post->setCachedHashTags($tags['original']);
        }
        $em->flush($post);
    }

    /**
     * @param Question $question
     * @param bool     $saveTagsInEntity
     */
    public function addForQuestion(Question $question, $saveTagsInEntity = true)
    {
        $em = $this->getEntityManager();
        if ($question instanceof PollPetition) {
            $tags = HashTagParser::parseHashTags($question->getPetitionBody());
        } else {
            $tags = HashTagParser::parseHashTags($question->getSubject());
        }
        foreach ($tags['parsed'] as $tag) {
            $entity = $this->findOneBy(['name' => $tag]);
            if (!$entity) {
                $entity = new HashTag($tag);
                $em->persist($entity);
            }
            $question->addHashTag($entity);
            $em->persist($entity);
        }

        if ($saveTagsInEntity) {
            $question->setCachedHashTags($tags['original']);
        }
        $em->flush($question);
    }
}
